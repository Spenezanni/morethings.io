[
	
		{
		  "title"      : "Novas collections do EcmaScript 6",
		  "category"   : "",
		  "url"        : "http://morethings.io/javascript/novas-collections-do-ecmascript-6",
		  "date"       : "2013-12-19 10:00:00 UTC",
		  "shortdate"  : "December 19, 2013",
		  "content"    : "Para quem estava no Front in Recife, e acompanhou a minha palestra junto com Guilherme Farias ja teve um spoiler do post, visto que apresentamos la um pouco sobre as novas collections, bem como outras novidades do ECMAScript 6.O que são collections?Em toda a história do JavaScript, houve apenas um tipo de collection representado pelo Array. Em outras linguagens como Python, Ruby e Java, já existem outras collections, e com a especificação do ECMAScript 6, também poderemos usá-las. Os novos tipos permitem o armazenamento melhor e mais eficiente de dados.SetsSets são listas ordenadas de valores que não permite valores duplicados. Normalmente você não acessa itens que foram setados, como normalmente fazemos com Arrays, ao invés disso, é mais comum verificar o conjunto para ver se um valor está presente.Permite-se adicionar valores usando o método add() e verificar quantos itens estão no set usando size().var items = new Set();items.add(5);items.add(&quot;5&quot;);console.log(items.size()); // 2items.add(5); // ja existe, sera ignoradoconsole.log(items.size()); // 2Pode-se verificar se algum item está no set usando o método has(). Para remover algum valor, basta usar o método remove().console.log(items.has(5)); // trueitems.delete(5)console.log(items.has(5)); // falseMapsÉ bem parecido com os sets, mas a ideia básica do map é que possui uma chave única, que você pode setar ou verificar a qualquer momento usando esta chave. Em JavaScript, os desenvolvedores tradicionalmente usam objetos regulares como Maps. Inclusive o próprio JSON é baseado neste conceito que representa pares de chave/valor.var map = new Map();map.set(&quot;cor&quot;, &quot;verde&quot;);console.log(map.has(&quot;cor&quot;));   // trueconsole.log(map.get(&quot;cor&quot;));   // &quot;verde&quot;console.log(map.size());       // 1map.delete(&quot;cor&quot;);console.log(map.has(&quot;cor&quot;));   // falseconsole.log(map.get(&quot;cor&quot;));   // undefinedconsole.log(map.size());       // 0WeakMapsBem parecido com os maps, os weakmaps também são baseados em chave/valor. Porém, a chave não pode ser um tipo primitivo (String, por exemplo). Ao invés disso, a chave deve ser um objeto. Isto pode parecer estranho, mas isto é bastante útil em algumas situações.var map = new WeakMap(),    element = document.querySelector(&quot;.element&quot;);map.set(element, &quot;valor qualquer&quot;);var value = map.get(element);console.log(value); // &quot;valor qualquer&quot;element.parentNode.removeChild(element);element = null;value = map.get(element);console.log(value); // undefined"
		} 
	
]